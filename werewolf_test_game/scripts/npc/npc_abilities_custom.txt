// Dota Heroes File
"DOTAAbilities"
{
	//=================================================================================================================
	// Templar Assassin: Refraction Holdout
	//=================================================================================================================
	"templar_assassin_refraction_holdout"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0 0.0 0.0 0.0"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"17.0 17.0 17.0 17.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_absorb"				"200 300 400 500"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"20 40 60 80"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"17.0 17.0 17.0 17.0"
			}
		}
	}
"antimage_super"
{
	// General -> These determine What Kind of Ability we're writing. 
	// Hardcoded vs. Data-driven, targeting & magic immunity/root behaviors, spell icon.
	//-------------------------------------------------------------------------------------------------------------
	"BaseClass"				"ability_datadriven"
	"AbilityBehavior"			"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
	"AbilityTextureName"			"antimage_blink"

	// Precache -> You can replace abilities on individual heroes. 
	// If you're using a stock hero, all of their resources are automatically loaded.
	// If you're assigning the ability to a custom hero (or a different one, like LC) you'll need to precache their assets here.
	//-------------------------------------------------------------------------------------------------------------
	"precache"
	{
		"soundfile"		"soundevents/game_sounds_heroes/game_sounds_beastmaster.vsndevts"
		"soundfile"		"soundevents/game_sounds_heroes/game_sounds_antimage.vsndevts"
		"particle"		"particles/units/heroes/hero_antimage/antimage_blink_end.vpcf"
		"particle"		"particles/units/heroes/hero_antimage/antimage_blink_start.vpcf"
	}

	// Casting -> This will determine events that will occur before the ability is fired.
	//-------------------------------------------------------------------------------------------------------------
	"AbilityCastPoint"				"0.4 0.4 0.4 0.4"

	// Time	-> Time controls for the ability. Usually cooldown, sometimes other things.	
	//-------------------------------------------------------------------------------------------------------------
	"AbilityCooldown"				"4.0 3.0 2.0 1.0"
	
	// Cost -> Things like mana or HP costs are set here. Gold is enabled too lul.
	//-------------------------------------------------------------------------------------------------------------
	"AbilityManaCost"				"1 2 3 4"
	
	// Special -> These functions handle the actual scripting of the ability. 
	// Ability actions are handled in Lua, but their constraints are set here.
	// In this instance, the first two brackets define range constraints that are called in the lua function.
	// min_blink_range isn't referenced in the script, but the Lua script is called in the "OnSpellStart" area.
	// Each part of the "OnSpellStart" area needs to be told where to fire effects or sounds. 
	// In this instance, it's "caster" or anti-mage himself.
	// At the end of the Lua script, (and the beginning of the abillity) a particle is attached to AM that is pre-cached in the first lines of this file.
	// At the end of this ability, another particle is attached to AM for the end of his blink animation when he lands.
	//-------------------------------------------------------------------------------------------------------------
	"AbilitySpecial"
	{
		"01"
		{
			"var_type"			"FIELD_INTEGER"
			"blink_range"			"2000 3000 4000 5000"
		}
		
		"02"
		{
			"var_type"			"FIELD_INTEGER"
			"min_blink_range"		"200"
		}
	}

	"OnSpellStart"
	{
		"RunScript"
		{
			"ScriptFile"	"scripts/vscripts/blink.lua"
			"Function"		"Blink"
			"Target"		"POINT"
		}
		"FireSound"
		{
			"EffectName"	"Hero_Beastmaster.Primal_Roar"
			"Target" 		"CASTER"
		}
		"FireSound"
		{
			"EffectName"	"Hero_Antimage.Blink_in"
			"Target"		"CASTER"
		}

		"AttachEffect"
		{
			"EffectName"	"particles/units/heroes/hero_antimage/antimage_blink_end.vpcf"
			"Target"		"CASTER"
			"EffectAttachType"	"follow_origin"
		}
	}
	}
}








